{% extends "layout.html.twig" %}

{% import "macros.html.twig" as m %}

{% block title %}Tutorial: Push on the Web{% endblock %}

{% block description %}
  Bake WebSockets in without breaking your existing website
{% endblock %}

{% block body %}
  <div class="container-fluid">
    <div class="row-fluid">

    {{ m.menu() }}

      <div class="span9">
            <h2>Push to an Existing Site<br /><small>Enhance your existing work without wide-spread changes.</small></h2>

            <section class="intro">
                <h3>The Problem</h3>

                <p>
                    The previous tutorials were cool and all, but their focus was creating a long lived application where users interacted with each other.
                    That's a lot of work to incorporate into an already existing site.
                    Code would need to be ported out of your repository and into a new Ratchet application.
                    A whole new testing phase would need to happen to make sure previously functional pages still work.
                </p>

                <h3>Goal</h3>

                <p>
                    When a user, be it yourself in your admin or a user posting a comment on your blog, does a POST through a form submission or AJAX we want that change to immediately be pushed to all other visitors on that page.
                    We will add real-time updates to our site without disrupting your code base or affecting its current stability.
                </p>

                <p>For this tutorial we're going to pretend you're publishing a blog article on your website and the visitors will see the story pop up as soon as you publish it.</p>

                <h3>Givens</h3>

                <p>
                    Your blog is hosted on <em>example.com</em> with an internal IP address of <em>192.168.56.101</em>
                    and you have another server <em>sock.example.com</em> with an internal IP address of <em>192.168.56.102</em> that will run your Ratchet application.
                    With our servers on the same local network we can restrict access to non-public ports so they can communicate with each other without having to authenticate.
                </p>
            </section>

            <section class="diagram">
                <h3>Network Architecture</h3>

                <ol>
                    <li>
                        <img src="/assets/img/push-1.png" alt="Step 1">
                        <p>
                            A client makes a request and receives a response from the web server and renders the page.
                            It then establishes an open WebSocket connection (client 2 and 3 do the same thing).
                        </p>
                    </li>

                    <li>
                        <img src="/assets/img/push-2.png" alt="Step 2">
                        <p>
                            Client 1 does a POST back, through form submission or AJAX, to the web server.
                            (Notice the still open WebSocket connection)
                        </p>
                    </li>

                    <li>
                        <img src="/assets/img/push-3.png" alt="Step 3">
                        <p>While the server is handling the POST request (saving to database, etc) it sends a message directly to the WebSocket stack with a ZeroMQ transport.</p>
                    </li>

                    <li>
                        <img src="/assets/img/push-4.png" alt="Step 4">
                        <p>
                            The WebSocket stack handles the ZeroMQ message and sends it to the appropriate clients through open WebSocket connections.
                            The web browsers handle the incoming message and update the webpage with Javascript accordingly.
                        </p>
                    </li>
                </ol>

                <p>
                    This workflow is un-obtrusive; it is easy to introduce into existing websites.
                    The only changes to the site are adding a 1 liner of ZeroMQ to the server and a Javascript file on the client to handle incoming message from the WebSocket server.
                </p>
            </section>

            <section>
                <h3>Requirements</h3>

                <h4>ZeroMQ</h4>

                <p>
                    To communicate with a running script it needs to be listening on an open socket.
                    Our application will be listening to port 80 for incoming WebSocket connections...but how will it also get updates from another PHP script?
                    Enter <a href="http://http://www.zeromq.org" rel="external">ZeroMQ</a>.
                    We could use raw sockets, like the ones Ratchet is built on, but ZeroMQ is a library that just makes sockets easier.
                </p>

                <p>
                    ZeroMQ is a library (libzmq) you will need to install, as well as a PECL extension for PHP bindings.
                    Installation is easy and is provided for many operating systems on <a href="http://www.zeromq.org" rel="external">their website</a>.
                </p>

                <h4>React/ZMQ</h4>

                <p>
                    Ratchet is a WebSocket library built on top of a socket library called <a href="http://reactphp.org" rel="external">React</a>.
                    React handles connections and the raw I/O for Ratchet.
                    In addition to React, which comes with Ratchet, we need another library that is part of the React suite: React/ZMQ.
                    This library will bind ZeroMQ sockets to the Reactor core enabling us to handle both WebSockets and ZeroMQ sockets.
                    To install, your <em>composer.json</em> file should look like this:
                </p>

                <pre class="prettprint json javascript">{
    "minimum-stability": "dev",
    "require": {
        "cboden/Ratchet": "0.2.*"
      , "react/zmq": "dev-master"
    }
}</pre>
            </section>

            <section>
                <h3>Start your coding</h3>

                <p>
                    Let's get to some code!  We'll start by stubbing out our class application.
                    We're going to use {{ m.wamp() }} for it's ease of use with the Pub/Sub pattern.
                    This will allow clients to subscribe to updates on a specific page and we'll only push updates to those who have subscribed.
                </p>

                <pre class="prettyprint php">&lt;?php
use Ratchet\ConnectionInterface;
use Ratchet\Wamp\WampServerInterface;

class Pusher implements WampServerInterface {
    public function onSubscribe(ConnectionInterface $conn, $topic) {
    }
    public function onUnSubscribe(ConnectionInterface $conn, $topic) {
    }
    public function onOpen(ConnectionInterface $conn) {
    }
    public function onClose(ConnectionInterface $conn) {
    }
    public function onCall(ConnectionInterface $conn, $id, $topic, array $params) {
        // In this application if clients send data it's because the user hacked around in console
        $conn->callError($id, $topic, 'You are not allowed to make calls')->close();
    }
    public function onPublish(ConnectionInterface $conn, $topic, $event, array $exclude, array $eligible) {
        // In this application if clients send data it's because the user hacked around in console
        $conn->close();
    }
    public function onError(ConnectionInterface $conn, \Exception $e) {
    }
}</pre>

                <p>
                    Simple enough? We just made the methods required for {{ m.wamp() }} and made sure no one tries to send data, closing the connection if they do.
                    We're making a push application and not accepting any incoming messages, those will all be coming from AJAX.
                </p>
            </section>

            <section>
                <h3>Editing your blog submission</h3>

                <p>
                    Next we're going to add a little ZeroMQ magic into your existing website's code where you handle a new blog post.
                    The code here may be a little basic and archaic compared to the advanced architecture your actual blog is, sitting on Drupal or WordPress, but we're focusing on the fundamentals.
                </p>

                <pre class="prettyprint php">&lt;?php
    // This all was here before  ;)
    $entryData = array(
        'cat'     => $_POST['category']
      , 'title'   => $_POST['title']
      , 'article' => $_POST['article']
      , 'when'    => time()
    );

    $pdo->prepare("INSERT INTO blogs (title, article, category, published) VALUES (?, ?, ?, ?)")
        ->execute($entryData['title'], $entryData['article'], $entryData['cat'], $entryData['when']);

    // This is our new stuff
    $context = new ZMQContext();
    $socket = $context->getSocket(ZMQ::SOCKET_PUSH, 'my pusher');
    $socket->connect("tcp://192.168.56.102:5555");

    $socket->send(json_encode($entryData));
</pre>
                <p>
                    After we logged your blog entry in the database we've opened a ZeroMQ connection to our socket server and delivered a serialized message with the same information.
                    (note: please do proper sanitization, this is just a quick and dirty example)
                </p>
            </section>

            <section>
                <h3>Handling ZeroMQ messages</h3>

                <p>
                    Let's go back to our application stub class.
                    As we left it, it was only handling WebSocket connections.
                    We're going to add handling a ZeroMQ message as well as re-sending it to our WebSocket clients.
                </p>

                <pre class="prettyprint php">&lt;?php
use Ratchet\ConnectionInterface;
use Ratchet\Wamp\WampServerInterface;

class Pusher implements WampServerInterface {
    /**
     * A lookup of all the topics clients have subscribed to
     */
    protected $subscribedTopics = array();

    public function onSubscribe(ConnectionInterface $conn, $topic) {
        // When a visitor subscribes to a topic link the Topic object in a  lookup array
        if (!array_key_exists($topic->getId(), $this->subscribedTopics)) {
            $this->subscribedTopics[$topic->getId()] = $topic;
        }
    }

    /**
     * @param string JSON'ified string we'll receive from ZeroMQ
     */
    public function onBlogEntry($entry) {
        $entryData = json_decode($entry, true);

        // If the lookup topic object isn't set there is no one to publish to
        if (!array_key_exists($entryData['cat'], $this->subscribedTopics)) {
            return;
        }

        $topic = $this->subscribedTopics[$entryData['cat']];

        // re-send the serialized json to all the clients subscribed to that category
        $topic->broadcast($entry);
    }

    /* The rest of our methods were as they were, omitted from docs to save space */
}
</pre>
            </section>

            <section>
                <h3>Tying it all together <small>Creating our executable</small></h3>

                <p>
                    So far we've covered all the logic of sending, receiving, and handling messages.
                    Now, we're going to bind it all together and create our executable script that manages everything.
                    We're going to build our Ratchet application with I/O, WebSockets, Wamp, and ZeroMQ components and run the event loop.
                </p>

                <pre class="prettyprint php">&lt;?php
    require __DIR__ . '/vendor/autoload.php';

    $loop   = React\EventLoop\Factory::create();
    $pusher = new Pusher();

    // Listen for the web server to make a ZeroMQ push after an ajax request
    $context = new React\ZMQ\Context($loop);
    $pull = $context->getSocket(ZMQ::SOCKET_PULL);
    $pull->bind('tcp://0.0.0.0:5555');
    $pull->on('message', array($pusher, 'onBlogEntry'));

    // Set up our WebSocket server for clients wanting real-time updates
    $webSock = new React\Socket\Server($loop);
    $webSock->listen(80, '0.0.0.0');
    $webServer = new Ratchet\Server\IoServer(
        new Ratchet\WebSocket\WsServer(
            new Ratchet\Wamp\WampServer(
                $pusher
            )
        ),
        $webSock
    );

    $loop->run();
</pre>

            <p>Save the code as "push-server.php" and run it:</p>

            <pre># php push-server.php</pre>

            </section>

            <section>
                <h3>Client side <small>Getting real-time updates</small></h3>

                <p>Now that our server side code is complete as well as up and running it's time to get those real-time posts! What you do with those updates specifically is beyond the scope of this document, we're just going to put those messages into the debug console.</p>

                <pre class="prettyprint javascript">&lt;script src="/scripts/when.js"&gt;&lt;/script&gt; //  You will have to download when.js
&lt;script src="http://autobahn.s3.amazonaws.com/js/autobahn.min.js"&gt;&lt;/script&gt;
&lt;script&gt;
    var conn = new ab.Session(
        'ws://sock.example.com' // The host (our Ratchet WebSocket server) to connect to
      , function() {            // Once the connection has been established
            conn.subscribe('kittensCategory', function(topic, data) {
                // This is where you would add the new article to the DOM (beyond the scope of this tutorial)
                var dataObj = JSON.parse(data);
                console.log('New article published to category "' + topic + '" : ' + dataObj.title);
            });
        }
      , function() {            // When the connection is closed
            console.warn('WebSocket connection closed');
        }
      , {                       // Additional parameters, we're ignoring the WAMP sub-protocol for older browsers
            'skipSubprotocolCheck': true
        }
    );
&lt;/script&gt;
</pre>
            </section>
        </div>
    </div>
{% endblock %}
